import 'package:google_sign_in/google_sign_in.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:flutter/foundation.dart';

class GoogleAuthService {
  static final GoogleAuthService _instance = GoogleAuthService._internal();
  factory GoogleAuthService() => _instance;
  GoogleAuthService._internal();

  final GoogleSignIn _googleSignIn = GoogleSignIn(
    scopes: ['email', 'profile', 'openid'],
    serverClientId: '514921114205-e17864v7035843lebaptp8j9n90to9vl.apps.googleusercontent.com',
  );

  final SupabaseClient _supabase = Supabase.instance.client;

  /// Inicia sesi√≥n con Google
  Future<AuthResponse?> signInWithGoogle() async {
    try {
      print('üîç Iniciando proceso de autenticaci√≥n con Google...');
      
      // Obtener cuenta de Google
      final GoogleSignInAccount? googleUser = await _googleSignIn.signIn();
      if (googleUser == null) {
        print('‚ùå Usuario cancel√≥ el inicio de sesi√≥n');
        return null;
      }

      print('‚úÖ Usuario de Google obtenido: ${googleUser.email}');

      // Obtener tokens de autenticaci√≥n
      final GoogleSignInAuthentication googleAuth = await googleUser.authentication;
      
      if (googleAuth.accessToken == null || googleAuth.idToken == null) {
        print('‚ùå No se pudieron obtener los tokens de Google');
        return null;
      }

      print('‚úÖ Tokens de Google obtenidos');

      // Autenticar con Supabase usando los tokens de Google
      final AuthResponse response = await _supabase.auth.signInWithIdToken(
        provider: OAuthProvider.google,
        idToken: googleAuth.idToken!,
        accessToken: googleAuth.accessToken!,
      );

      if (response.user != null) {
        print('‚úÖ Autenticaci√≥n exitosa con Supabase');
        print('Usuario ID: ${response.user!.id}');
        print('Email: ${response.user!.email}');
        
        return response;
      } else {
        print('‚ùå Error: Respuesta de Supabase sin usuario');
        return null;
      }
      
    } catch (e, stackTrace) {
      print('‚ùå Error en signInWithGoogle: $e');
      if (kDebugMode) {
        print('Stack trace: $stackTrace');
      }
      return null;
    }
  }

  /// Cierra la sesi√≥n de Google
  Future<void> signOut() async {
    try {
      print('üîç Cerrando sesi√≥n de Google...');
      
      // Cerrar sesi√≥n en Google
      await _googleSignIn.signOut();
      
      // Cerrar sesi√≥n en Supabase
      await _supabase.auth.signOut();
      
      print('‚úÖ Sesi√≥n cerrada exitosamente');
    } catch (e) {
      print('‚ùå Error cerrando sesi√≥n de Google: $e');
      rethrow;
    }
  }

  /// Verifica si el usuario est√° autenticado
  bool get isSignedIn => _supabase.auth.currentUser != null;

  /// Obtiene el usuario actual
  User? get currentUser => _supabase.auth.currentUser;

  /// Obtiene informaci√≥n del usuario de Google actual
  Future<GoogleSignInAccount?> getCurrentGoogleUser() async {
    try {
      return await _googleSignIn.signInSilently();
    } catch (e) {
      print('‚ùå Error obteniendo usuario actual de Google: $e');
      return null;
    }
  }

  /// Obtiene el stream de cambios de autenticaci√≥n
  Stream<AuthState> get authStateChanges => _supabase.auth.onAuthStateChange;
}